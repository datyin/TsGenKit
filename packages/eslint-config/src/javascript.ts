import type { ESLint } from "eslint";

const config: ESLint.ConfigData["overrides"] = [
  {
    files: [
      "*.js",
      "*.jsx",
      "*.mjs",
      "*.cjs",
      "*.mjsx",
      "*.cjsx",
      "*.node"
    ],
    rules: {
      // Formatting
      "quotes": ["error", "double"],
      "semi": ["error", "always"],
      "semi-spacing": ["error", { before: false, after: true }],
      "no-trailing-spaces": "error",
      "array-element-newline": ["error", {
        ArrayExpression: "consistent",
        ArrayPattern: { minItems: 3 },
      }],
      "array-bracket-newline": ["error", { multiline: true }],
      "array-bracket-spacing": ["error", "never"],
      "arrow-parens": ["error", "always"],
      "arrow-spacing": ["error", { before: true, after: true }],
      "comma-dangle": ["error", "never"],
      "comma-spacing": ["error", { before: false, after: true }],
      "comma-style": ["error", "last"],
      "computed-property-spacing": ["error", "never"],
      "dot-location": ["error", "property"],
      "eol-last": ["error", "always"],
      "func-call-spacing": ["error", "never"],
      "function-call-argument-newline": ["error", "consistent"],
      "function-paren-newline": ["error", "multiline-arguments"],
      "generator-star-spacing": ["error", { before: true, after: false }],
      "implicit-arrow-linebreak": ["error", "beside"],
      "indent": ["error", 2, {
        SwitchCase: 1,
        VariableDeclarator: "first",
        MemberExpression: 1,
        FunctionDeclaration: {body: 1, parameters: "first" },
        FunctionExpression: {body: 1, parameters: "first" },
        StaticBlock: { body: 1 },
        CallExpression: { arguments: "first" },
        ArrayExpression: "first",
        ObjectExpression: "first",
        ImportDeclaration: "first",
        flatTernaryExpressions: false,
        offsetTernaryExpressions: false
      }],

      "jsx-quotes": ["error", "prefer-double"],
      "key-spacing": ["error", { beforeColon: false, afterColon: true }],
      "keyword-spacing": ["error", { before: true, after: true }],
      "lines-around-comment": ["error", {
        beforeBlockComment: true,
        afterBlockComment: false,
        beforeLineComment: true,
        afterLineComment: false,
        allowBlockStart: true,
        allowBlockEnd: false,
        allowObjectStart: true,
        allowObjectEnd: false,
        allowArrayStart: true,
        allowArrayEnd: false,
        allowClassStart: true,
        allowClassEnd: false,
      }],

      "lines-between-class-members": ["error", "always"],
      "max-len": ["error", {
        code: 80,
        tabWidth: 2,
        ignoreComments: true,
        ignoreTrailingComments: true,
        ignoreUrls: true,
        ignoreStrings: true,
        ignoreTemplateLiterals: true,
        ignoreRegExpLiterals: true,
      }],
      "max-statements-per-line": ["error", { max: 1 }],
      "no-mixed-spaces-and-tabs": "error",
      "no-multi-spaces": ["error", {
        ignoreEOLComments: true,
      }],
      "no-multiple-empty-lines": ["error", {
        max: 1,
        maxBOF: 0,
        maxEOF: 0,
      }],
      "no-tabs": "error",
      "no-whitespace-before-property": "error",
      "object-curly-newline": ["error", { multiline: true }],
      "object-curly-spacing": ["error", "always"],
      "object-property-newline": ["error", {
        allowAllPropertiesOnSameLine: true,
      }],
      "operator-linebreak": ["error", "after", {
        overrides: {
          "?": "before",
          ":": "before",
        }
      }],
      "padding-line-between-statements": ["error", 
        { blankLine: "always", prev: ["const", "let", "var"], next: "*"},
        { blankLine: "any",    prev: ["const", "let", "var"], next: ["const", "let", "var"]},
        { blankLine: "always", prev: "directive", next: "*" },
        { blankLine: "any",    prev: "directive", next: "directive" },
        { blankLine: "always", prev: "import", next: "*" },
        { blankLine: "any",    prev: "import", next: "import" },
        { blankLine: "always", prev: "export", next: "*" },
        { blankLine: "any",    prev: "export", next: "export" },
        { blankLine: "always", prev: "cjs-import", next: "*" },
        { blankLine: "any",    prev: "cjs-import", next: "cjs-import" },
        { blankLine: "always", prev: "cjs-export", next: "*" },
        { blankLine: "any",    prev: "cjs-export", next: "cjs-export" }
      ],
      "rest-spread-spacing": ["error", "never"],
      "space-before-blocks": ["error", "always"],
      "space-in-parens": ["error", "never"],
      "space-infix-ops": ["error"],
      "space-unary-ops": ["error"],
      "switch-colon-spacing": ["error", { after: true, before: false }],
      "template-curly-spacing": ["error", "never"],
      "template-tag-spacing": ["error", "never"],
      "unicode-bom": ["warn", "never"],
      "wrap-regex": "error",
      "yield-star-spacing": ["error", { before: true, after: false }],

      // Possible Errors
      "array-callback-return": "error",
      "constructor-super": "error",
      "for-direction": "error",
      "getter-return": "error",
      "no-async-promise-executor": "error",
      "no-await-in-loop": "warn",
      "no-class-assign": "error",
      "no-compare-neg-zero": "error",
      "no-cond-assign": "error",
      "no-constant-binary-expression": "error",
      "no-constant-condition": ["warn", { checkLoops: false }],
      "no-debugger": "warn",
      "no-dupe-args": "error",
      "no-dupe-class-members": "error",
      "no-dupe-else-if": "error",
      "no-dupe-keys": "error",
      "no-duplicate-case": "error",
      "no-empty-character-class": "error",
      "no-empty-pattern": "error",
      "no-ex-assign": "error",
      "no-fallthrough": "error",
      "no-func-assign": "error",
      "no-import-assign": "error",
      "no-inner-declarations": "error",
      "no-invalid-regexp": "error",
      "no-irregular-whitespace": ["warn", {
        skipStrings: true,
        skipComments: true,
        skipRegExps: true,
        skipTemplates: true,
        skipJSXText: true
      }],
      "no-loss-of-precision": "warn",
      "no-obj-calls": "error",
      "no-prototype-builtins": "error",
      "no-self-assign": "error",
      "no-self-compare": "error",
      "no-setter-return": "error",
      "no-sparse-arrays": "error",
      "no-template-curly-in-string": "warn",
      "no-this-before-super": "error",
      "no-undef": "error",
      "no-unexpected-multiline": "error",
      "no-unreachable": "warn",
      "no-unreachable-loop": "warn",
      "no-unsafe-finally": "error",
      "no-unsafe-negation": "error",
      "no-unsafe-optional-chaining": "error",
      "no-unused-private-class-members": "warn",
      "no-unused-vars": ["warn", { args: "none", caughtErrors: "none" }],
      "no-use-before-define": "error",
      "no-useless-backreference": "error",
      "use-isnan": "error",
      "valid-typeof": "error",

      // Suggestions
      "block-scoped-var": "error",
      "consistent-return": "error",
      "curly": ["error", "multi-line", "consistent"],
      "default-case": "warn",
      "default-case-last": "error",
      "eqeqeq": ["error", "always", { null: "ignore" }],
      "init-declarations": ["error", "always"],
      "no-alert": "error",
      "no-array-constructor": "error",
      "no-case-declarations": "error",
      "no-eval": "warn",
      "no-extra-boolean-cast": "error",
      "no-global-assign": "warn",
      "no-nonoctal-decimal-escape": "error",
      "no-octal": "error",
      "no-param-reassign": ["warn", { props: true }],
      "no-redeclare": "error",
      "no-regex-spaces": "error",
      "no-shadow-restricted-names": "error",
      "no-var": "error",
      "no-void": "error",
      "no-with": "error",
      "prefer-const": "error",
      "prefer-template": "error",
      "quote-props": ["error", "consistent-as-needed"],
      "require-yield": "error",
      "yoda": "error",
    }
  },
  {
    files: [
      "*.cjs",
      "*.json5",
      "*.jsonc"
    ],
    parser: "jsonc-eslint-parser",
    rules: {
      "jsonc/no-plus-sign": "error",
      "jsonc/valid-json-number": "error"
    }
  }
];

export default config;
